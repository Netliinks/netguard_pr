//
//  VisitsView.ts
//
//  Generated by Poll Castillo on 09/03/2023.
//
import { Config } from "../../Configs.js";
import { getEntityData, getEntitiesData, getUserInfo } from "../../endpoints.js";
import { drawTagsIntoTables, filterDataByHeaderType } from "../../tools.js";
import { tableLayout, tableLayoutTemplate } from "./Layout.js";
// Local configs
const tableRows = Config.tableRows;
let currentPage = Config.currentPage;
const pageName = 'Empresas';
const currentBusiness = async () => {
    const currentUser = await getUserInfo();
    const business = await getEntityData('User', `${currentUser.attributes.id}`);
    return business;
};
const GetCustomers = async () => {
    const businessData = await currentBusiness();
    const customers = await getEntitiesData('Customer');
    const FCustomer = customers.filter((data) => data.business.id === `${businessData.business.id}`);
    return FCustomer;
};
export class SelectCustomer {
    constructor() {
        this.dialogContainer = document.getElementById('app-dialogs');
        this.siebarDialogContainer = document.getElementById('entity-editor-container');
        this.appContainer = document.getElementById('datatable-container');
        this.render = async () => {
            this.appContainer.innerHTML = '';
            this.appContainer.innerHTML = tableLayout;
            // Getting interface elements
            const viewTitle = document.getElementById('view-title');
            const tableBody = document.getElementById('datatable-body');
            // Changing interface element content
            tableBody.innerHTML = '.Cargando...';
            let customersArray = await GetCustomers();
            tableBody.innerHTML = tableLayoutTemplate.repeat(tableRows);
            // Exec functions
            this.load(tableBody, currentPage, customersArray);
            new filterDataByHeaderType().filter();
            this.searchCustomer(tableBody, customersArray);
            // Rendering icons
        };
        this.load = (tableBody, currentPage, customers) => {
            tableBody.innerHTML = ''; // clean table
            // configuring max table row size
            currentPage--;
            let start = tableRows * currentPage;
            let end = start + tableRows;
            let paginatedItems = customers.slice(start, end);
            // Show message if page is empty
            if (customers.length === 0) {
                let row = document.createElement('TR');
                row.innerHTML = `
            <td>No existen datos<td>
            <td></td>
            <td></td>
            `;
                tableBody.appendChild(row);
            }
            else {
                for (let i = 0; i < paginatedItems.length; i++) {
                    let customer = paginatedItems[i]; // getting visit items
                    let row = document.createElement('TR');
                    row.innerHTML += `
                    <td style="white-space: nowrap">${customer.name}</td>
                    <td>${customer.ruc}</td>
                    <td class="tag"><span>${customer.state.name}</span></td>
                    <td>${customer.permitMarcation ? 'Si' : 'No'}</td>
                    <td>${customer.permitVehicular ? 'Si' : 'No'}</td>
                    <td>
                        <button class="button" id="entity-details" data-entityId="${customer.id}">
                            <i class="table_icon fa-regular fa-check"></i>
                        </button>
                    </td>
                `;
                    tableBody.appendChild(row);
                    drawTagsIntoTables();
                }
                this.previewVisit();
            }
        };
        this.searchCustomer = async (tableBody, customers) => {
            const search = document.getElementById('search');
            await search.addEventListener('keyup', () => {
                const arrayCustomers = customers.filter((customer) => `${customer.name}${customer.ruc}${customer.ruc}${customer.permitMarcation ? 'Si' : 'No'}${customer.permitVehicular ? 'Si' : 'No'}`
                    .toLowerCase()
                    .includes(search.value.toLowerCase()));
                let filteredCustomer = arrayCustomers.length;
                let result = arrayCustomers;
                if (filteredCustomer >= Config.tableRows)
                    filteredCustomer = Config.tableRows;
                this.load(tableBody, currentPage, result);
            });
        };
        this.previewVisit = async () => {
            const openButtons = document.querySelectorAll('#entity-details');
            openButtons.forEach((openButton) => {
                const entityId = openButton.dataset.entityid;
                openButton.addEventListener('click', () => {
                    const customerId = localStorage.getItem('customer_id');
                    //console.log(`customerId ${customerId}`)
                    if (customerId == null) {
                        localStorage.setItem('customer_id', entityId);
                    }
                    else {
                        localStorage.removeItem('customer_id');
                        localStorage.setItem('customer_id', entityId);
                    }
                    window.location.reload();
                });
            });
        };
    }
}

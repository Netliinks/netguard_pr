//
//  interface.ts
//
//  Generated by Poll Castillo on 15/02/2023.
//
import { getEntityData, getUserInfo, updateEntity } from "../endpoints.js";
import { SelectCustomer } from "./selectCustomer/selectCustomer.js";
import { Dashboard } from "../views/dashboard/dashboard.js";
import { SignIn } from "../login.js";
import { Sidebar } from "./sidebar.js";
import { ChangePassword } from "./changePassword/changePassword.js";
import { CloseDialog } from "../tools.js";
import { FirebaseCtrl } from "../services/FirebaseCtrl.js";
export class RenderApplicationUI {
    constructor() {
        this.loginContainer = document.getElementById('login-container');
        this.APP = document.getElementById('app');
        this.sidebarContainer = document.getElementById('app-sidebar');
        this.topbar = document.getElementById('app-topbar');
    }
    render() {
      this.loginContainer.style.display = 'none';
      this.APP.style.display = 'grid';
      this.sidebarContainer.style.display = 'inline-flex';
      this.topbar.style.display = 'flex';
      this.renderTopbar();
      new Sidebar().render();
      new Dashboard().render();
      //new SelectCustomer().render();
  }
  async renderTopbar() {
    const customerId = localStorage.getItem('customer_id')
    const tokenMessaging = localStorage.getItem('libreriasjs-notification-token');
    const currentUser = await getUserInfo();
    const user = await getEntityData('User', currentUser.attributes.id);
    let customer = await getEntityData('Customer', customerId);
    let topbar = this.topbar.innerHTML = `
        <div class="user">
            <span class="welcome">Bienvenido</span>
            <span class="separator"></span>
            <div class="userAvatar">
                <i class="fa-solid fa-user"></i>
            </div>
            <div class="nameAndCustomer">
                <p id="current-username" class="name">
                ${user.firstName} ${user.lastName}
                </p>
                <p id="current-user-customer" class="customer">${user.username}</p>
                <p >${customer.name ? customer.name : 'Seleccione una empresa'}</p>
            </div>
           <div class="settings_button">
             <button id="settings-button">
               <i class="fa-solid fa-gear"></i>
             </button>
           </div>
           <div class="user_settings" id="user-settings">
             <button class="btn btn_transparent btn_widder" id="permit-notify">🔔 Activar notificaciones</button>
             <button class="btn btn_transparent btn_widder" id="change-customer">Cambiar Empresa</button>
             <!--<button class="btn btn_transparent btn_widder">Preferencias</button>-->
             <button class="btn btn_transparent btn_widder" id="change-password">Cambiar Contraseña</button>
             <br>
             <button class="btn btn_primary btn_widder" id="logout-button">Cerrar sesión</button>
           </div>
         </div>
    `;
    this.topbar.innerHTML = topbar;
    const permitNotify = document.getElementById('permit-notify');
    const fireBaseCtrl = new FirebaseCtrl();
    fireBaseCtrl.initApp();
    fireBaseCtrl.onError((errorMessage) => {
        permitNotify.innerText = "❌ Error, reintente"
        permitNotify.disabled= false
        console.log(errorMessage)
    });
    fireBaseCtrl.onGetToken((token) => {
        let raw = JSON.stringify({
            // @ts-ignore
            "webToken": `${token}`,
        });
        updateEntity('User', currentUser.attributes.id, raw).then((res) => {
            console.log("token: "+token)
            permitNotify.innerText = "✔️​ Notificaciones activas"
            permitNotify.disabled= true
        });
    });
    fireBaseCtrl.onRecieveNotification((notificationData) => {
        
        //let dialog = confirm(`${notificationData.notification.title} | ${notificationData.notification.body}`);
        let topBarNotification = this.topbar.innerHTML = `
            <div class="user">
                <span class="welcome" id="titleNotify"style="color:red;">ALERTA</span>
                <span class="separator"></span>
                <div class="userAvatar">
                    <button id="okNotification">
                    <i class="fa-solid fa-bell" style="color:red; font-size:20px;"></i>
                    </button>
                </div>
                <div class="nameAndCustomer">
                    <p id="current-username" class="name">
                    ${notificationData.notification.title}
                    </p>
                    <p id="current-user-customer" class="customer">${notificationData.notification.body}</p>
                </div>
            </div>
            
            
        `;
        this.topbar.innerHTML = topBarNotification;
        //const audio = document.getElementById("audio");
        const button = document.getElementById("okNotification");
        const titleNotify = document.getElementById("titleNotify");
        const audio = new Audio("./public/src/assets/sounds/alarm.mp3");
        audio.play();
        let counter = 1000;
        let color = 1;
        let change = async () => {
            if(color == 1){
                titleNotify.style.color = "red";
                color = 2;
            }else{
                titleNotify.style.color = "orange";
                color = 1;
            }
            setTimeout(change, counter);
        }
        setTimeout(change, counter);
        audio.play();
        button.addEventListener('click', () => {
            audio.pause();
            audio.currentTime = 0;
            this.renderTopbar();
            
        });
    });
    const options = document.getElementById('settings-button');
    options.addEventListener('click', () => {
        const settingOptions = document.getElementById('user-settings');
        const changePassword = document.getElementById('change-password');
        const changeCustomer = document.getElementById('change-customer');
        const logoutButton = document.getElementById('logout-button');
        settingOptions.classList.toggle("user_settings_visible");
        permitNotify.addEventListener("click", async (event) => {
            if(tokenMessaging == undefined){
                try {
                    const permission = await Notification.requestPermission();
                    if (permission !== "granted") {
                        console.log("No se ha aceptado el registro de notificaciones");
                        return;
                    }
                    await fireBaseCtrl.enableWebNotifications();
                }
                catch (err) {
                    console.log("Hubo un error", err);
                }
                finally {
                    permitNotify.disabled= true
                }
            }
        });
        changePassword.addEventListener("click", () => {
            new ChangePassword().render();
            //new CloseDialog().x(settingOptions);
        });
        changeCustomer.addEventListener("click", () => {
            new SelectCustomer().render(0, 1, '');
            //new CloseDialog().x(settingOptions);
        });
        logoutButton.addEventListener("click", () => {
            new SignIn().signOut();
        });
    });
}
}
const renderSetting = () => {
    const options = document.getElementById('settings-button');
    options.addEventListener('click', () => {
        const settingOptions = document.querySelector("#user-settings");
        const logoutButton = settingOptions.querySelector("#logout");
        settingOptions.classList.toggle("user_settings_visible");
        logoutButton.addEventListener("click", () => {
            new SignIn().signOut();
        });
    });
};
//new Dashboard().render();
